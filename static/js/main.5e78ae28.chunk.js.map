{"version":3,"sources":["orbit-helpers.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["OrbitDB","require","ipfs","window","Ipfs","repo","start","EXPERIMENTAL","pubsub","config","Addresses","Swarm","orbitdb","on","e","console","error","getOrbit","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","wrap","_context2","prev","next","abrupt","Promise","resolve","reject","_callee","_context","stop","this","apply","arguments","QRCode","App","state","address","entries","location","href","search","split","open","db","log","toString","add","iterator","limit","collect","setState","react_default","createElement","className","component_default","target","position","src","logo","alt","concat","rel","value","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wWAAMA,SAAUC,EAAQ,KAGlBC,EAAO,IAAIC,OAAOC,KAAK,CAC3BC,KAAM,4CACNC,OAAO,EACPC,aAAc,CACZC,QAAQ,GAEVC,OAAQ,CACNC,UAAW,CACTC,MAAO,CAGL,wEASJC,EAAU,IAAIZ,EAAQE,GAE1BA,EAAKW,GAAG,QAAS,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,KAEpC,IAAMG,EAAQ,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACR,IAAIC,QAAQ,SAACC,EAASC,GAC3B9B,EAAKW,GAAG,QAARM,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAiB,SAAAU,IAAA,OAAAZ,EAAAC,EAAAG,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OACfG,EAAQnB,GADO,wBAAAsB,EAAAC,SAAAF,EAAAG,aAFJ,wBAAAV,EAAAS,SAAAX,EAAAY,SAAH,yBAAAlB,EAAAmB,MAAAD,KAAAE,YAAA,GCpBVC,EAAStC,EAAQ,KA0DNuC,6MAvDbC,MAAQ,CACNC,QAAS,GACTC,QAAS,4NAIa1B,WAAhBL,SACN,IACE8B,EAAUvC,OAAOyC,SAASC,KAAKC,OAAOC,MAAM,YAAY,GACxD,MAAOjC,QACL4B,mCACS9B,EAAQoC,KAAKN,UAAxBO,kDAEWrC,EAAQsC,IAAI,wBAAvBD,SACAP,EAAUO,EAAGP,QAAQS,qBACfF,EAAGG,IAAI,kCAEOH,EAAGI,SAAS,CAAEC,MAAO,IAAKC,kBAA1CZ,SACNP,KAAKoB,SAAS,CACZd,UACAC,gJAIF,OACEc,EAAAnC,EAAAoC,cAAA,OAAKC,UAAU,OACbF,EAAAnC,EAAAoC,cAACE,EAAAtC,EAAD,CACEuB,KAAK,8CACLgB,OAAO,SACPC,SAAS,SAHX,qBAOAL,EAAAnC,EAAAoC,cAAA,UAAQC,UAAU,cAChBF,EAAAnC,EAAAoC,cAAA,OAAKK,IAAKC,IAAML,UAAU,WAAWM,IAAI,SACzCR,EAAAnC,EAAAoC,cAAA,iBACOD,EAAAnC,EAAAoC,cAAA,0BADP,wCAGAD,EAAAnC,EAAAoC,cAAA,KACEC,UAAU,WACVd,KAAI,YAAAqB,OAAc9B,KAAKK,MAAMC,SAC7BmB,OAAO,SACPM,IAAI,uBAJN,gBAOEV,EAAAnC,EAAAoC,cAAA,WACAD,EAAAnC,EAAAoC,cAAA,WACAD,EAAAnC,EAAAoC,cAACnB,EAAD,CAAQ6B,MAAOhC,KAAKK,MAAMC,oBAhDpB2B,aCGEC,QACW,cAA7BnE,OAAOyC,SAAS2B,UAEe,UAA7BpE,OAAOyC,SAAS2B,UAEhBpE,OAAOyC,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAnC,EAAAoC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.5e78ae28.chunk.js","sourcesContent":["const OrbitDB = require(\"orbit-db\");\n\n// eslint-disable-next-line\nconst ipfs = new window.Ipfs({\n  repo: \"/orbitdb/examples/browser/new/ipfs/0.27.3\",\n  start: true,\n  EXPERIMENTAL: {\n    pubsub: true\n  },\n  config: {\n    Addresses: {\n      Swarm: [\n        // Use IPFS dev signal server\n        // '/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star',\n        \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\"\n        // Use local signal server\n        // '/ip4/0.0.0.0/tcp/9090/wss/p2p-webrtc-star',\n      ]\n    }\n  }\n});\n\n// eslint-disable-next-line\nlet orbitdb = new OrbitDB(ipfs);\n\nipfs.on(\"error\", e => console.error(e));\n\nconst getOrbit = async () => {\n  return new Promise((resolve, reject) => {\n    ipfs.on(\"ready\", async () => {\n      resolve(orbitdb);\n    });\n  });\n};\n\nexport { getOrbit };\n\n// ipfs.on(\"ready\", async () => {\n//     let address, db;\n//     try {\n//       address = window.location.href.search.split(\"?address\")[0];\n//     } catch (e) {}\n//     if (address) {\n//       db = await orbitdb.open(address);\n//     } else {\n//       db = await orbitdb.log(\"hello\");\n//       address = db.address.toString();\n//       await db.add(\"world\");\n//     }\n\n//     this.setState({\n//       address\n//     });\n\n//     let entries = await db.iterator({ limit: 5 }).collect();\n\n//     console.log(entries);\n//   });\n","import React, { Component } from \"react\";\nimport GitHubForkRibbon from \"react-github-fork-ribbon\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { getOrbit } from \"./orbit-helpers\";\n\nvar QRCode = require(\"qrcode.react\");\n\nclass App extends Component {\n  state = {\n    address: \"\",\n    entries: []\n  };\n  async componentWillMount() {\n    let address, db;\n    const orbitdb = await getOrbit();\n    try {\n      address = window.location.href.search.split(\"?address\")[0];\n    } catch (e) {}\n    if (address) {\n      db = await orbitdb.open(address);\n    } else {\n      db = await orbitdb.log(\"hello\");\n      address = db.address.toString();\n      await db.add(\"world\");\n    }\n    const entries = await db.iterator({ limit: 5 }).collect();\n    this.setState({\n      address,\n      entries\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <GitHubForkRibbon\n          href=\"//github.com/OR13/create-react-app-orbit-db\"\n          target=\"_blank\"\n          position=\"right\"\n        >\n          Fork me on GitHub\n        </GitHubForkRibbon>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload. See JS Console.\n          </p>\n          <a\n            className=\"App-link\"\n            href={`?address=${this.state.address}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Open Database\n            <br />\n            <br />\n            <QRCode value={this.state.address} />\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}
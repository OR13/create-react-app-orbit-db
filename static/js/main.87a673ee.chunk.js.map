{"version":3,"sources":["components/ParticlesContainer/index.js","components/ParticlesContainer/ParticlesContainer.js","utils/ipfs.js","components/Presence/Presence.js","components/Presence/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ParticlesContainer","react_default","a","createElement","particles_default","className","params","fps_limit","particles","number","value","density","enable","line_linked","distance","opacity","move","speed","anim","opacity_min","sync","polygon","scale","type","radius","url","inline","arrangement","draw","stroke","color","retina_detect","interactivity","events","onhover","mode","modes","bubble","size","Component","ipfs","window","Ipfs","repo","Math","random","start","EXPERIMENTAL","pubsub","config","Addresses","Swarm","on","e","console","error","getIPFS","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","abrupt","Promise","resolve","reject","_callee","info","_context","id","sent","log","stop","this","apply","arguments","Room","require","Presence","room","peer","App","component_default","href","target","position","components_ParticlesContainer","components_Presence","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87a673ee.chunk.js","sourcesContent":["import ParticlesContainer from \"./ParticlesContainer\";\nexport default ParticlesContainer;\n","import React, { Component } from \"react\";\n\nimport Particles from \"react-particles-js\";\n\nclass ParticlesContainer extends Component {\n  render() {\n    return (\n      <Particles\n        className='Particles'\n        params={{\n          fps_limit: 28,\n          particles: {\n            number: {\n              value: 200,\n              density: {\n                enable: false\n              }\n            },\n            line_linked: {\n              enable: true,\n              distance: 30,\n              opacity: 0.4\n            },\n            move: {\n              speed: 1\n            },\n            opacity: {\n              anim: {\n                enable: true,\n                opacity_min: 0.05,\n                speed: 2,\n                sync: false\n              },\n              value: 0.4\n            }\n          },\n          polygon: {\n            enable: true,\n            scale: 0.5,\n            type: \"inline\",\n            move: {\n              radius: 10\n            },\n            url: \"./mask.svg\",\n            inline: {\n              arrangement: \"equidistant\"\n            },\n            draw: {\n              enable: true,\n              stroke: {\n                color: \"rgba(255, 255, 255, .2)\"\n              }\n            }\n          },\n          retina_detect: false,\n          interactivity: {\n            events: {\n              onhover: {\n                enable: true,\n                mode: \"bubble\"\n              }\n            },\n            modes: {\n              bubble: {\n                size: 6,\n                distance: 40\n              }\n            }\n          }\n        }}\n      />\n    );\n  }\n}\n\nexport default ParticlesContainer;\n","const repo = () => {\n  return \"/orbitdb/create-react-app-orbit-db/\" + Math.random();\n};\n\n// eslint-disable-next-line\nconst ipfs = new window.Ipfs({\n  repo: repo(),\n  start: true,\n  EXPERIMENTAL: {\n    pubsub: true\n  },\n  config: {\n    Addresses: {\n      Swarm: [\n        // \"/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star\"\n        // \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\",\n        \"/dns4/wrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star\"\n      ]\n    }\n  }\n});\n\nipfs.on(\"error\", e => console.error(e));\n\nconst getIPFS = async () => {\n  if (window.ipfs) {\n    return Promise.resolve(window.ipfs);\n  }\n\n  return new Promise((resolve, reject) => {\n    ipfs.on(\"ready\", async () => {\n      const info = await ipfs.id();\n      console.log(\"IPFS READY: \", info.id);\n      window.ipfs = ipfs;\n      resolve(window.ipfs);\n    });\n  });\n};\n\nexport { getIPFS };\n","import React, { Component } from \"react\";\n\nimport { getIPFS } from \"../../utils/ipfs\";\n\nconst Room = require(\"ipfs-pubsub-room\");\n\nclass Presence extends Component {\n  async componentWillMount() {\n    this.ipfs = await getIPFS();\n    const room = Room(this.ipfs, \"create-react-app-orbit-db\");\n\n    room.on(\"peer joined\", peer => {\n      console.log(\"Peer joined the room\", peer);\n    });\n\n    room.on(\"peer left\", peer => {\n      console.log(\"Peer left...\", peer);\n    });\n\n    // now started to listen to room\n    room.on(\"subscribed\", () => {\n      console.log(\"Now connected!\");\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Presence\">\n        <pre>here...</pre>\n      </div>\n    );\n  }\n}\n\nexport default Presence;\n","import Presence from \"./Presence\";\nexport default Presence;\n","import App from \"./App\";\nexport default App;\n","import React, { Component } from \"react\";\nimport GitHubForkRibbon from \"react-github-fork-ribbon\";\n\nimport \"./App.css\";\n\nimport { ParticlesContainer, Presence } from \"../index\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <GitHubForkRibbon\n          href=\"//github.com/OR13/create-react-app-orbit-db\"\n          target=\"_blank\"\n          position=\"right\"\n        >\n          Fork me on GitHub\n        </GitHubForkRibbon>\n        <ParticlesContainer />\n        <Presence />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}